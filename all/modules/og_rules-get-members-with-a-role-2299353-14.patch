diff --git a/og.install b/og.install
index d874492..0cb739a 100644
--- a/og.install
+++ b/og.install
@@ -332,7 +332,7 @@ function og_schema() {
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => "The name of the field holding the group ID, the OG memebership is associated with.",
+        'description' => "The name of the field holding the group ID, the OG membership is associated with.",
       ),
       'language' => array(
         'description' => 'The {languages}.language of this membership.',
@@ -1008,7 +1008,7 @@ function og_update_7200() {
     'length' => 255,
     'not null' => TRUE,
     'default' => '',
-    'description' => "The name of the field holding the group ID, the OG memebership is associated with.",
+    'description' => "The name of the field holding the group ID, the OG membership is associated with.",
   );
   db_add_field('og_membership', 'field_name', $column);
 
diff --git a/og.rules.inc b/og.rules.inc
index c7eab2e..244cc6f 100644
--- a/og.rules.inc
+++ b/og.rules.inc
@@ -107,6 +107,30 @@ function og_rules_action_info() {
     'access callback' => 'og_rules_integration_access',
   );
 
+  $items['og_get_members_with_role'] = array(
+    'label' => t('Get group members with selected group role(s) from group audience'),
+    'group' => t('Organic groups'),
+    'parameter' => array(
+      'group_content' => array(
+        'type' => 'entity',
+        'label' => t('Group content'),
+        'description' => t('A content from the group. Determining the group audience.'),
+      ),
+
+      'og_role' => array(
+        'type' => 'list<text>',
+        'label' => t('Group roles'),
+        'options list' => 'og_rules_group_roles_options_list',
+        'description' => t('Select a group role to limit members list.'),
+      ),
+    ),
+    'provides' => array(
+      'group_members_with_role' => array('type' => 'list<user>', 'label' => t('List of group members with role')),
+    ),
+    'base' => 'og_rules_get_members_with_role',
+    'access callback' => 'og_rules_integration_access',
+  );
+
   $items['og_get_group_content'] = array(
     'label' => t('Get group content from a group'),
     'group' => t('Organic groups'),
@@ -131,6 +155,30 @@ function og_rules_action_info() {
     'access callback' => 'og_rules_integration_access',
   );
 
+  $items['og_get_members_with_role_in_group'] = array(
+    'label' => t('Get group members with role(s) in group'),
+    'group' => t('Organic groups'),
+    'parameter' => array(
+      'group' => array(
+        'type' => 'entity',
+        'label' => t('Group'),
+        'description' => t('The group.'),
+      ),
+
+      'og_role' => array(
+        'type' => 'list<text>',
+        'label' => t('Group roles'),
+        'options list' => 'og_rules_group_roles_options_list',
+        'description' => t('Select group role(s) to limit members list.'),
+      ),
+    ),
+    'provides' => array(
+      'group_members_with_role_in_group' => array('type' => 'list<user>', 'label' => t('List of group members with selected role(s) in group')),
+    ),
+    'base' => 'og_rules_get_members_with_role_in_group',
+    'access callback' => 'og_rules_integration_access',
+  );
+
   $items['og_group_content_add'] = array(
     'label' => t('Add entity to group'),
     'group' => t('Organic groups'),
@@ -279,9 +327,10 @@ function og_rules_action_info() {
 /**
  * Action: Get group members from a group content.
  */
-function og_rules_get_members($group_content) {
+function og_rules_get_members(EntityDrupalWrapper $group_content) {
   if (!isset($group_content->og_membership)) {
     // Not a group content.
+    watchdog('rules', 'Entity is not a group content. <pre>@entity</pre>', array('@entity' => print_r($group_content->value(), TRUE)), WATCHDOG_ERROR);
     return;
   }
 
@@ -304,9 +353,40 @@ function og_rules_get_members($group_content) {
 }
 
 /**
+ * Action: Get group members with selected group role from a group content.
+ */
+function og_rules_get_members_with_role(EntityDrupalWrapper $group_content, array $og_roles) {
+  if (!isset($group_content->og_membership)) {
+    // Not a group content.
+    watchdog('rules', 'Entity is not a group content. <pre>@entity</pre>', array('@entity' => print_r($group_content->value(), TRUE)), WATCHDOG_ERROR);
+    return;
+  }
+
+  $members = array();
+  foreach ($group_content->og_membership->value() as $og_membership) {
+    // Get the group members in group(s) which this group content belongs to.
+    // Limit list to users with selected role(s).
+    $query = db_select('og_users_roles', 'ogur');
+    $query->join('og_role', 'ogr', 'ogr.rid = ogur.rid');
+    $query->fields('ogur', array('uid'))
+      ->condition('ogur.gid', $og_membership->gid)
+      ->condition('ogur.group_type', $og_membership->group_type)
+      ->condition('ogr.name', $og_roles, 'IN')
+      ->distinct();
+
+    $current_members = $query->execute()->fetchCol();
+    $members = array_merge($members, $current_members);
+  }
+
+  // Remove duplicate items.
+  $members = array_unique($members);
+  return array('group_members_with_role' => $members);
+}
+
+/**
  * Action: Get group managers from a group content.
  */
-function og_rules_get_managers($group_content) {
+function og_rules_get_managers(EntityDrupalWrapper $group_content) {
   if (!isset($group_content->og_membership)) {
     // Not a group content.
     return;
@@ -326,6 +406,23 @@ function og_rules_get_managers($group_content) {
 }
 
 /**
+ * Action: Get group members with selected group role(s) in a group.
+ */
+function og_rules_get_members_with_role_in_group(EntityDrupalWrapper $group, array $og_roles) {
+  // Get active members with specified role(s) in this group.
+  $query = db_select('og_users_roles', 'ogur');
+  $query->join('og_role', 'ogr', 'ogr.rid = ogur.rid');
+  $query->join('og_membership', 'ogm', 'ogm.gid = ogur.gid');
+  $query->fields('ogur', array('uid'))
+    ->condition('ogur.group_type', $group->type())
+    ->condition('ogur.gid', $group->getIdentifier())
+    ->condition('ogm.state', OG_STATE_ACTIVE)
+    ->condition('ogr.name', $og_roles, 'IN')
+    ->distinct();
+  return array('group_members_with_role_in_group' => $query->execute()->fetchCol());
+}
+
+/**
  * Action: Fetch group content of a certain entity type.
  */
 function og_rules_get_group_content(EntityDrupalWrapper $group, $entity_type) {
diff --git a/og.test b/og.test
index e8616c2..3a9f024 100644
--- a/og.test
+++ b/og.test
@@ -1911,7 +1911,7 @@ function testSetStateOnInsert() {
     $gids = og_get_entity_groups('node', 1);
     $id = key($gids['entity_test']);
     $og_membership = og_membership_load($id);
-    $this->assertEqual($og_membership->state, OG_STATE_ACTIVE, 'Memebership status is Active');
+    $this->assertEqual($og_membership->state, OG_STATE_ACTIVE, 'Membership status is Active');
 
 
     // Post a node, state should be pending.
@@ -1921,7 +1921,7 @@ function testSetStateOnInsert() {
     $gids = og_get_entity_groups('node', 2, array(OG_STATE_PENDING));
     $id = key($gids['entity_test']);
     $og_membership = og_membership_load($id);
-    $this->assertEqual($og_membership->state, OG_STATE_PENDING, 'Memebership status is Active');
+    $this->assertEqual($og_membership->state, OG_STATE_PENDING, 'Membership status is Active');
   }
 }
 
diff --git a/og_rules-get-members-with-a-role-2299353-12.patch b/og_rules-get-members-with-a-role-2299353-12.patch
new file mode 100644
index 0000000..1bcfc8e
--- /dev/null
+++ b/og_rules-get-members-with-a-role-2299353-12.patch
@@ -0,0 +1,213 @@
+diff --git a/og.install b/og.install
+index d874492..0cb739a 100644
+--- a/og.install
++++ b/og.install
+@@ -332,7 +332,7 @@ function og_schema() {
+         'length' => 255,
+         'not null' => TRUE,
+         'default' => '',
+-        'description' => "The name of the field holding the group ID, the OG memebership is associated with.",
++        'description' => "The name of the field holding the group ID, the OG membership is associated with.",
+       ),
+       'language' => array(
+         'description' => 'The {languages}.language of this membership.',
+@@ -1008,7 +1008,7 @@ function og_update_7200() {
+     'length' => 255,
+     'not null' => TRUE,
+     'default' => '',
+-    'description' => "The name of the field holding the group ID, the OG memebership is associated with.",
++    'description' => "The name of the field holding the group ID, the OG membership is associated with.",
+   );
+   db_add_field('og_membership', 'field_name', $column);
+ 
+diff --git a/og.rules.inc b/og.rules.inc
+index c7eab2e..197bde3 100644
+--- a/og.rules.inc
++++ b/og.rules.inc
+@@ -107,6 +107,30 @@ function og_rules_action_info() {
+     'access callback' => 'og_rules_integration_access',
+   );
+ 
++  $items['og_get_members_with_role'] = array(
++    'label' => t('Get group members with selected group role(s) from group audience'),
++    'group' => t('Organic groups'),
++    'parameter' => array(
++      'group_content' => array(
++        'type' => 'entity',
++        'label' => t('Group content'),
++        'description' => t('A content from the group. Determining the group audience.'),
++      ),
++
++      'og_role' => array(
++        'type' => 'list<text>',
++        'label' => t('Group roles'),
++        'options list' => 'og_rules_group_roles_options_list',
++        'description' => t('Select a group role to limit members list.'),
++      ),
++    ),
++    'provides' => array(
++      'group_members_with_role' => array('type' => 'list<user>', 'label' => t('List of group members with role')),
++    ),
++    'base' => 'og_rules_get_members_with_role',
++    'access callback' => 'og_rules_integration_access',
++  );
++
+   $items['og_get_group_content'] = array(
+     'label' => t('Get group content from a group'),
+     'group' => t('Organic groups'),
+@@ -131,6 +155,30 @@ function og_rules_action_info() {
+     'access callback' => 'og_rules_integration_access',
+   );
+ 
++  $items['og_get_members_with_role_in_group'] = array(
++    'label' => t('Get group members with role(s) in group'),
++    'group' => t('Organic groups'),
++    'parameter' => array(
++      'group' => array(
++        'type' => 'entity',
++        'label' => t('Group'),
++        'description' => t('The group.'),
++      ),
++
++      'og_role' => array(
++        'type' => 'list<text>',
++        'label' => t('Group roles'),
++        'options list' => 'og_rules_group_roles_options_list',
++        'description' => t('Select group role(s) to limit members list.'),
++      ),
++    ),
++    'provides' => array(
++      'group_members_with_role_in_group' => array('type' => 'list<user>', 'label' => t('List of group members with selected role(s) in group')),
++    ),
++    'base' => 'og_rules_get_members_with_role_in_group',
++    'access callback' => 'og_rules_integration_access',
++  );
++
+   $items['og_group_content_add'] = array(
+     'label' => t('Add entity to group'),
+     'group' => t('Organic groups'),
+@@ -279,9 +327,10 @@ function og_rules_action_info() {
+ /**
+  * Action: Get group members from a group content.
+  */
+-function og_rules_get_members($group_content) {
++function og_rules_get_members(EntityDrupalWrapper $group_content) {
+   if (!isset($group_content->og_membership)) {
+     // Not a group content.
++    watchdog('rules', 'Entity is not a group content. <pre>@entity</pre>', array('@entity' => print_r($group_content->value(), TRUE)), WATCHDOG_ERROR);
+     return;
+   }
+ 
+@@ -304,9 +353,40 @@ function og_rules_get_members($group_content) {
+ }
+ 
+ /**
++ * Action: Get group members with selected group role from a group content.
++ */
++function og_rules_get_members_with_role(EntityDrupalWrapper $group_content, array $og_roles) {
++  if (!isset($group_content->og_membership)) {
++    // Not a group content.
++    watchdog('rules', 'Entity is not a group content. <pre>@entity</pre>', array('@entity' => print_r($group_content->value(), TRUE)), WATCHDOG_ERROR);
++    return;
++  }
++
++  $members = array();
++  foreach ($group_content->og_membership->value() as $og_membership) {
++    // Get the group members in group(s) which this group content belongs to.
++    // Limit list to users with selected role(s).
++    $query = db_select('og_users_roles', 'ogur');
++    $query->join('og_role', 'ogr', 'ogr.rid = ogur.rid');
++    $query->fields('ogur', array('uid'))
++      ->condition('ogur.gid', $og_membership->gid)
++      ->condition('ogur.group_type', $og_membership->group_type)
++      ->condition('ogr.name', $og_roles, 'IN')
++      ->distinct();
++
++    $current_members = $query->execute()->fetchCol();
++    $members = array_merge($members, $current_members);
++  }
++
++  // Remove duplicate items.
++  $members = array_unique($members);
++  return array('group_members_with_role' => $members);
++}
++
++/**
+  * Action: Get group managers from a group content.
+  */
+-function og_rules_get_managers($group_content) {
++function og_rules_get_managers(EntityDrupalWrapper $group_content) {
+   if (!isset($group_content->og_membership)) {
+     // Not a group content.
+     return;
+@@ -326,6 +406,22 @@ function og_rules_get_managers($group_content) {
+ }
+ 
+ /**
++ * Action: Get group members with selected group role(s) in a group.
++ */
++function og_rules_get_members_with_role_in_group(EntityDrupalWrapper $group, array $og_roles) {
++  // Get active members with specified role(s) in this group.
++  $query = db_select('og_users_roles', 'ogur');
++  $query->join('og_role', 'ogr', 'ogr.rid = ogur.rid');
++  $query->join('og_membership', 'ogm', 'ogm.gid = :og_gid', array(':og_gid' => $group->getIdentifier()));
++  $query->fields('ogur', array('uid'))
++    ->condition('ogur.group_type', $group->type())
++    ->condition('ogm.state', OG_STATE_ACTIVE)
++    ->condition('ogr.name', $og_roles, 'IN')
++    ->distinct();
++  return array('group_members_with_role_in_group' => $query->execute()->fetchCol());
++}
++
++/**
+  * Action: Fetch group content of a certain entity type.
+  */
+ function og_rules_get_group_content(EntityDrupalWrapper $group, $entity_type) {
+diff --git a/og.test b/og.test
+index e8616c2..3a9f024 100644
+--- a/og.test
++++ b/og.test
+@@ -1911,7 +1911,7 @@ function testSetStateOnInsert() {
+     $gids = og_get_entity_groups('node', 1);
+     $id = key($gids['entity_test']);
+     $og_membership = og_membership_load($id);
+-    $this->assertEqual($og_membership->state, OG_STATE_ACTIVE, 'Memebership status is Active');
++    $this->assertEqual($og_membership->state, OG_STATE_ACTIVE, 'Membership status is Active');
+ 
+ 
+     // Post a node, state should be pending.
+@@ -1921,7 +1921,7 @@ function testSetStateOnInsert() {
+     $gids = og_get_entity_groups('node', 2, array(OG_STATE_PENDING));
+     $id = key($gids['entity_test']);
+     $og_membership = og_membership_load($id);
+-    $this->assertEqual($og_membership->state, OG_STATE_PENDING, 'Memebership status is Active');
++    $this->assertEqual($og_membership->state, OG_STATE_PENDING, 'Membership status is Active');
+   }
+ }
+ 
+diff --git a/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc b/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
+index ef3b25d..0540e3d 100644
+--- a/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
++++ b/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
+@@ -1,7 +1,7 @@
+ <?php
+ 
+ /**
+- * Overview of the group memberships (e.g. group manager, total memebrs).
++ * Overview of the group memberships (e.g. group manager, total members).
+  */
+ class og_ui_handler_area_og_membership_overview extends views_handler_area {
+ 
+diff --git a/og_ui/includes/views/og_ui.views.inc b/og_ui/includes/views/og_ui.views.inc
+index f7a8efc..94598bc 100644
+--- a/og_ui/includes/views/og_ui.views.inc
++++ b/og_ui/includes/views/og_ui.views.inc
+@@ -14,7 +14,7 @@ function og_ui_views_data() {
+   // Define a handler for an area used to provide a group overview.
+   $data['og_membership']['og_membership_overview'] = array(
+     'title' => t('Group membership overview'),
+-    'help' => t('Overview of the group memberships (e.g. group manager, total memebrs).'),
++    'help' => t('Overview of the group memberships (e.g. group manager, total members).'),
+     'area' => array(
+       'handler' => 'og_ui_handler_area_og_membership_overview',
+     ),
diff --git a/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc b/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
index ef3b25d..0540e3d 100644
--- a/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
+++ b/og_ui/includes/views/handlers/og_ui_handler_area_og_membership_overview.inc
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * Overview of the group memberships (e.g. group manager, total memebrs).
+ * Overview of the group memberships (e.g. group manager, total members).
  */
 class og_ui_handler_area_og_membership_overview extends views_handler_area {
 
diff --git a/og_ui/includes/views/og_ui.views.inc b/og_ui/includes/views/og_ui.views.inc
index f7a8efc..94598bc 100644
--- a/og_ui/includes/views/og_ui.views.inc
+++ b/og_ui/includes/views/og_ui.views.inc
@@ -14,7 +14,7 @@ function og_ui_views_data() {
   // Define a handler for an area used to provide a group overview.
   $data['og_membership']['og_membership_overview'] = array(
     'title' => t('Group membership overview'),
-    'help' => t('Overview of the group memberships (e.g. group manager, total memebrs).'),
+    'help' => t('Overview of the group memberships (e.g. group manager, total members).'),
     'area' => array(
       'handler' => 'og_ui_handler_area_og_membership_overview',
     ),
